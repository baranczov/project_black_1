import asyncio
import logging
import sys

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.client.default import DefaultBotProperties

from config import BOT_TOKEN, DEBUG, LOGGING_LEVEL
from api_requests import get_weather_info

logging.basicConfig(
    level=LOGGING_LEVEL,
    stream=sys.stdout,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    encoding="utf-8",
)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)


class WeatherStates(StatesGroup):
    waiting_for_start_point = State()
    waiting_for_end_point = State()
    waiting_for_intermediate = State()
    waiting_for_interval = State()


def get_route_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞", callback_data="add_point")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data="finish_route")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_interval_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data="interval_1"),
            InlineKeyboardButton(text="2 –¥–Ω—è", callback_data="interval_2"),
            InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="interval_3"),
        ],
        [
            InlineKeyboardButton(text="4 –¥–Ω—è", callback_data="interval_4"),
            InlineKeyboardButton(text="5 –¥–Ω–µ–π", callback_data="interval_5"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.message(CommandStart())
async def command_start(message: Message) -> None:
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.\n"
        "–Ø –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –≤–∞—à–µ–º –º–∞—Ä—à—Ä—É—Ç–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )


@router.message(Command("help"))
async def command_help_handler(message: Message) -> None:
    help_text = (
        "üå§ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/weather - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /weather "
        "–∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    )
    await message.answer(help_text)


@router.message(Command("weather"))
async def command_weather(message: Message, state: FSMContext) -> None:
    await state.set_state(WeatherStates.waiting_for_start_point)
    await message.answer("üåç –£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞\n(–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞)")


@router.message(WeatherStates.waiting_for_start_point)
async def process_start_point(message: Message, state: FSMContext) -> None:
    await state.update_data(start_point=message.text)
    await state.set_state(WeatherStates.waiting_for_end_point)
    await message.answer("üìç –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞")


@router.message(WeatherStates.waiting_for_end_point)
async def process_end_point(message: Message, state: FSMContext) -> None:
    await state.update_data(end_point=message.text, intermediate_points=[])
    keyboard = get_route_keyboard()
    await message.answer("üõ£ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏?", reply_markup=keyboard)


@router.callback_query(F.data == "add_point")
async def process_add_point(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(WeatherStates.waiting_for_intermediate)
    await callback.message.answer("üìç –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞")
    await callback.answer()


@router.message(WeatherStates.waiting_for_intermediate)
async def process_intermediate_point(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    points = data.get("intermediate_points", [])
    points.append(message.text)
    await state.update_data(intermediate_points=points)

    keyboard = get_route_keyboard()
    await message.answer(
        f"‚úÖ –¢–æ—á–∫–∞ {message.text} –¥–æ–±–∞–≤–ª–µ–Ω–∞! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ?",
        reply_markup=keyboard,
    )


@router.callback_query(F.data == "finish_route")
async def process_finish_route(callback: CallbackQuery, state: FSMContext) -> None:
    keyboard = get_interval_keyboard()
    await state.set_state(WeatherStates.waiting_for_interval)
    await callback.message.answer("‚è± –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("interval_"))
async def process_interval(callback: CallbackQuery, state: FSMContext) -> None:
    interval = int(callback.data.split("_")[1])
    data = await state.get_data()

    route_info = f"üö© <b>–í–∞—à –º–∞—Ä—à—Ä—É—Ç:</b>\n–ù–∞—á–∞–ª–æ: {data['start_point']}\n"

    if data.get("intermediate_points"):
        route_info += "\n–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏:\n"
        for i, point in enumerate(data["intermediate_points"], 1):
            route_info += f"{i}. {point}\n"

    route_info += (
        f"\n–ö–æ–Ω–µ—Ü: {data['end_point']}\n"
        f"\nüìÖ –ü—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ {interval} –¥–Ω—è(–¥–Ω–µ–π)"
    )

    await callback.message.answer(route_info)

    weather_info = get_weather_info(data, interval, get_cached=DEBUG)
    await callback.message.answer(
        "üåç –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω!\n\n"
        "üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ:\n" + weather_info
    )

    await state.clear()
    await callback.answer()


@router.message()
async def echo_handler(message: Message) -> None:
    await message.answer(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )


@router.errors()
async def handle_error(event: TelegramAPIError):
    try:
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %s", str(event.exception))
        if event.update.message:
            await event.update.message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
            )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: %s", str(e))


async def main() -> None:
    logger.info("Starting bot...")
    try:
        await dp.start_polling(
            bot, allowed_updates=dp.resolve_used_update_types()
        )
    except TelegramAPIError as e:
        logger.error(f"Telegram API Error: {e}")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped!")
